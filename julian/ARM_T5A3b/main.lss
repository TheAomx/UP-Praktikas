
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000109c  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000002c  0000109c  0000109c  0000909c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  00200000  000010c8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000048  00000000  00000000  00010014  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00010060  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000015c  00000000  00000000  00010100  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001084  00000000  00000000  0001025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003c9  00000000  00000000  000112e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000351  00000000  00000000  000116a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  000119fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000658  00000000  00000000  00011c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a6  00000000  00000000  000122a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .ARM.attributes 00000010  00000000  00000000  0001264e  2**0
                  CONTENTS, READONLY
Disassembly of section .text:

00000000 <_startup>:
       0:	ea000010 	b	48 <InitReset>

00000004 <undefvec>:
       4:	eafffffe 	b	4 <undefvec>

00000008 <swivec>:
       8:	eafffffe 	b	8 <swivec>

0000000c <pabtvec>:
       c:	eafffffe 	b	c <pabtvec>

00000010 <dabtvec>:
      10:	eafffffe 	b	10 <dabtvec>

00000014 <rsvdvec>:
      14:	eafffffe 	b	14 <rsvdvec>

00000018 <irqvec>:
      18:	ea000027 	b	bc <IRQ_Handler_Entry>

0000001c <FIQ_Handler_Entry>:
      1c:	e1a09000 	mov	r9, r0
      20:	e5980104 	ldr	r0, [r8, #260]
      24:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
      28:	e92d500e 	push	{r1, r2, r3, ip, lr}
      2c:	e1a0e00f 	mov	lr, pc
      30:	e12fff10 	bx	r0
      34:	e8bd500e 	pop	{r1, r2, r3, ip, lr}
      38:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
      3c:	e1a00009 	mov	r0, r9
      40:	e25ef004 	subs	pc, lr, #4	; 0x4

00000044 <.RAM_TOP>:
      44:	00204000 	.word	0x00204000

00000048 <InitReset>:
      48:	e51fd00c 	ldr	sp, [pc, #-12]	; 44 <.RAM_TOP>
      4c:	e59f00c4 	ldr	r0, [pc, #196]	; 118 <AT91F_Spurious_handler+0x4>
      50:	e1a0e00f 	mov	lr, pc
      54:	e12fff10 	bx	r0
      58:	e1a0000d 	mov	r0, sp
      5c:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
      60:	e59f80b4 	ldr	r8, [pc, #180]	; 11c <AT91F_Spurious_handler+0x8>
      64:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
      68:	e1a0d000 	mov	sp, r0
      6c:	e2400060 	sub	r0, r0, #96	; 0x60
      70:	e321f013 	msr	CPSR_c, #19	; 0x13
      74:	e1a0d000 	mov	sp, r0
      78:	e59f10a0 	ldr	r1, [pc, #160]	; 120 <AT91F_Spurious_handler+0xc>
      7c:	e59f20a0 	ldr	r2, [pc, #160]	; 124 <AT91F_Spurious_handler+0x10>
      80:	e59f30a0 	ldr	r3, [pc, #160]	; 128 <AT91F_Spurious_handler+0x14>

00000084 <LoopRel>:
      84:	e1520003 	cmp	r2, r3
      88:	34910004 	ldrcc	r0, [r1], #4
      8c:	34820004 	strcc	r0, [r2], #4
      90:	3afffffb 	bcc	84 <LoopRel>
      94:	e3a00000 	mov	r0, #0	; 0x0
      98:	e59f108c 	ldr	r1, [pc, #140]	; 12c <AT91F_Spurious_handler+0x18>
      9c:	e59f208c 	ldr	r2, [pc, #140]	; 130 <AIC_EOICR>

000000a0 <LoopZI>:
      a0:	e1510002 	cmp	r1, r2
      a4:	34810004 	strcc	r0, [r1], #4
      a8:	3afffffc 	bcc	a0 <LoopZI>
      ac:	e59fe080 	ldr	lr, [pc, #128]	; 134 <AIC_EOICR+0x4>
      b0:	e59f0080 	ldr	r0, [pc, #128]	; 138 <AIC_EOICR+0x8>
      b4:	e12fff10 	bx	r0

000000b8 <exit>:
      b8:	eafffffe 	b	b8 <exit>

000000bc <IRQ_Handler_Entry>:
      bc:	e24ee004 	sub	lr, lr, #4	; 0x4
      c0:	e92d4000 	push	{lr}
      c4:	e14fe000 	mrs	lr, SPSR
      c8:	e92d4000 	push	{lr}
      cc:	e92d0001 	push	{r0}
      d0:	e59fe044 	ldr	lr, [pc, #68]	; 11c <AT91F_Spurious_handler+0x8>
      d4:	e59e0100 	ldr	r0, [lr, #256]
      d8:	e58ee100 	str	lr, [lr, #256]
      dc:	e321f013 	msr	CPSR_c, #19	; 0x13
      e0:	e92d500e 	push	{r1, r2, r3, ip, lr}
      e4:	e1a0e00f 	mov	lr, pc
      e8:	e12fff10 	bx	r0
      ec:	e8bd500e 	pop	{r1, r2, r3, ip, lr}
      f0:	e321f092 	msr	CPSR_c, #146	; 0x92
      f4:	e59fe020 	ldr	lr, [pc, #32]	; 11c <AT91F_Spurious_handler+0x8>
      f8:	e58ee130 	str	lr, [lr, #304]
      fc:	e8bd0001 	pop	{r0}
     100:	e8bd4000 	pop	{lr}
     104:	e16ff00e 	msr	SPSR_fsxc, lr
     108:	e8fd8000 	ldm	sp!, {pc}^

0000010c <AT91F_Default_FIQ_handler>:
     10c:	eafffffe 	b	10c <AT91F_Default_FIQ_handler>

00000110 <AT91F_Default_IRQ_handler>:
     110:	eafffffe 	b	110 <AT91F_Default_IRQ_handler>

00000114 <AT91F_Spurious_handler>:
     114:	eafffffe 	b	114 <AT91F_Spurious_handler>
     118:	0000013c 	.word	0x0000013c
     11c:	fffff000 	.word	0xfffff000
     120:	000010c8 	.word	0x000010c8
     124:	00200000 	.word	0x00200000
     128:	00200014 	.word	0x00200014
     12c:	00200014 	.word	0x00200014
     130:	00200014 	.word	0x00200014
     134:	000000b8 	.word	0x000000b8
     138:	00000488 	.word	0x00000488

0000013c <AT91F_LowLevelInit>:
//* \brief This function performs very low level HW initialization
//*        this function can be use a Stack, depending the compilation
//*        optimization mode
//*----------------------------------------------------------------------------
void AT91F_LowLevelInit( void)
{  int i;
     13c:	e1a0c00d 	mov	ip, sp
     140:	e92dd800 	push	{fp, ip, lr, pc}
     144:	e24cb004 	sub	fp, ip, #4	; 0x4
     148:	e24dd004 	sub	sp, sp, #4	; 0x4
  // Disable Watchdog
  AT91C_BASE_WDTC->WDTC_WDMR= AT91C_WDTC_WDDIS;
     14c:	e3a0332a 	mov	r3, #-1476395008	; 0xa8000000
     150:	e1a03ac3 	asr	r3, r3, #21
     154:	e3a02902 	mov	r2, #32768	; 0x8000
     158:	e5832004 	str	r2, [r3, #4]
  // Set MCK at 24 MHz
  // Enabling the Main Oscillator:
  AT91C_BASE_PMC->PMC_MOR = ( (AT91C_CKGR_OSCOUNT) & (0x10 << 8)) | AT91C_CKGR_MOSCEN ;
     15c:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
     160:	e1a02ac2 	asr	r2, r2, #21
     164:	e3a03a01 	mov	r3, #4096	; 0x1000
     168:	e2833001 	add	r3, r3, #1	; 0x1
     16c:	e5823020 	str	r3, [r2, #32]
  // Wait the startup time
  while(!(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MOSCS));
     170:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
     174:	e1a03ac3 	asr	r3, r3, #21
     178:	e5933068 	ldr	r3, [r3, #104]
     17c:	e2033001 	and	r3, r3, #1	; 0x1
     180:	e3530000 	cmp	r3, #0	; 0x0
     184:	0afffff9 	beq	170 <AT91F_LowLevelInit+0x34>
  // CPU-Clock: MAIN_CLK / 4 (3 MHz)
  AT91C_BASE_PMC->PMC_MCKR = AT91C_PMC_CSS_MAIN_CLK | AT91C_PMC_PRES_CLK_4;
     188:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
     18c:	e1a03ac3 	asr	r3, r3, #21
     190:	e3a02009 	mov	r2, #9	; 0x9
     194:	e5832030 	str	r2, [r3, #48]
  // wait until MCKRDY in PMC_SR is set
  while(!(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MCKRDY));
     198:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
     19c:	e1a03ac3 	asr	r3, r3, #21
     1a0:	e5933068 	ldr	r3, [r3, #104]
     1a4:	e2033008 	and	r3, r3, #8	; 0x8
     1a8:	e3530000 	cmp	r3, #0	; 0x0
     1ac:	0afffff9 	beq	198 <AT91F_LowLevelInit+0x5c>
  // setting PLL (96 MHz)
  AT91C_BASE_PMC->PMC_PLLR = ((AT91C_CKGR_DIV      & 8) |
     1b0:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
     1b4:	e1a02ac2 	asr	r2, r2, #21
     1b8:	e3a039fd 	mov	r3, #4145152	; 0x3f4000
     1bc:	e2433ffe 	sub	r3, r3, #1016	; 0x3f8
     1c0:	e582302c 	str	r3, [r2, #44]
                              (AT91C_CKGR_PLLCOUNT & (60 << 8)) |
                              (AT91C_CKGR_MUL      & (63 << 16)));
  // Wait the startup time
  while(!(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_LOCK));
     1c4:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
     1c8:	e1a03ac3 	asr	r3, r3, #21
     1cc:	e5933068 	ldr	r3, [r3, #104]
     1d0:	e2033004 	and	r3, r3, #4	; 0x4
     1d4:	e3530000 	cmp	r3, #0	; 0x0
     1d8:	0afffff9 	beq	1c4 <AT91F_LowLevelInit+0x88>
  // CPU-Clock: PLL / 4 (24 MHz)
  AT91C_BASE_PMC->PMC_MCKR = AT91C_PMC_CSS_PLL_CLK | AT91C_PMC_PRES_CLK_4;
     1dc:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
     1e0:	e1a03ac3 	asr	r3, r3, #21
     1e4:	e3a0200b 	mov	r2, #11	; 0xb
     1e8:	e5832030 	str	r2, [r3, #48]
  // wait until MCKRDY in PMC_SR is set
  while(!(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MCKRDY));
     1ec:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
     1f0:	e1a03ac3 	asr	r3, r3, #21
     1f4:	e5933068 	ldr	r3, [r3, #104]
     1f8:	e2033008 	and	r3, r3, #8	; 0x8
     1fc:	e3530000 	cmp	r3, #0	; 0x0
     200:	0afffff9 	beq	1ec <AT91F_LowLevelInit+0xb0>
  //  Set Flash Waite state
  //  if MCK = 24MHz I have 36 Cycle for 1.5 usecond ( flied MC_FMR->FMCN)
  AT91C_BASE_MC->MC_FMR = ((AT91C_MC_FMCN)&(36<<16)) | AT91C_MC_FWS_0FWS ;
     204:	e3e020ff 	mvn	r2, #255	; 0xff
     208:	e3a03709 	mov	r3, #2359296	; 0x240000
     20c:	e5823060 	str	r3, [r2, #96]
  // Set up the default interrupts handler vectors
  AT91C_BASE_AIC->AIC_SVR[0] = (int) AT91F_Default_FIQ_handler ;
     210:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
     214:	e1a039c3 	asr	r3, r3, #19
     218:	e59f2050 	ldr	r2, [pc, #80]	; 270 <AT91F_LowLevelInit+0x134>
     21c:	e5832080 	str	r2, [r3, #128]
  for (i=1;i<31; i++)
     220:	e3a03001 	mov	r3, #1	; 0x1
     224:	e50b3010 	str	r3, [fp, #-16]
     228:	ea000008 	b	250 <AT91F_LowLevelInit+0x114>
  {
	  AT91C_BASE_AIC->AIC_SVR[i] = (int) AT91F_Default_IRQ_handler ;
     22c:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
     230:	e1a029c2 	asr	r2, r2, #19
     234:	e51b3010 	ldr	r3, [fp, #-16]
     238:	e59f1034 	ldr	r1, [pc, #52]	; 274 <AT91F_LowLevelInit+0x138>
     23c:	e2833020 	add	r3, r3, #32	; 0x20
     240:	e7821103 	str	r1, [r2, r3, lsl #2]
  //  Set Flash Waite state
  //  if MCK = 24MHz I have 36 Cycle for 1.5 usecond ( flied MC_FMR->FMCN)
  AT91C_BASE_MC->MC_FMR = ((AT91C_MC_FMCN)&(36<<16)) | AT91C_MC_FWS_0FWS ;
  // Set up the default interrupts handler vectors
  AT91C_BASE_AIC->AIC_SVR[0] = (int) AT91F_Default_FIQ_handler ;
  for (i=1;i<31; i++)
     244:	e51b3010 	ldr	r3, [fp, #-16]
     248:	e2833001 	add	r3, r3, #1	; 0x1
     24c:	e50b3010 	str	r3, [fp, #-16]
     250:	e51b3010 	ldr	r3, [fp, #-16]
     254:	e353001e 	cmp	r3, #30	; 0x1e
     258:	dafffff3 	ble	22c <AT91F_LowLevelInit+0xf0>
  {
	  AT91C_BASE_AIC->AIC_SVR[i] = (int) AT91F_Default_IRQ_handler ;
  }
  AT91C_BASE_AIC->AIC_SPU  = (int) AT91F_Spurious_handler ;
     25c:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
     260:	e1a039c3 	asr	r3, r3, #19
     264:	e59f200c 	ldr	r2, [pc, #12]	; 278 <AT91F_LowLevelInit+0x13c>
     268:	e5832134 	str	r2, [r3, #308]
}
     26c:	e89da808 	ldm	sp, {r3, fp, sp, pc}
     270:	0000010c 	.word	0x0000010c
     274:	0110      	.short	0x0110
     276:	0000      	.short	0x0000
     278:	00000114 	.word	0x00000114

0000027c <delay_ms>:
#define FREQ 18750
#define PWM_CHANNEL 2

typedef unsigned int uint_t;

void delay_ms(unsigned int milliseconds){
     27c:	e1a0c00d 	mov	ip, sp
     280:	e92dd800 	push	{fp, ip, lr, pc}
     284:	e24cb004 	sub	fp, ip, #4	; 0x4
     288:	e24dd008 	sub	sp, sp, #8	; 0x8
     28c:	e50b0014 	str	r0, [fp, #-20]
     290:	ea00000a 	b	2c0 <delay_ms+0x44>
	volatile unsigned int i;

	while (milliseconds--)
		for (i=0; i<1638; i++);
     294:	e3a03000 	mov	r3, #0	; 0x0
     298:	e50b3010 	str	r3, [fp, #-16]
     29c:	ea000002 	b	2ac <delay_ms+0x30>
     2a0:	e51b3010 	ldr	r3, [fp, #-16]
     2a4:	e2833001 	add	r3, r3, #1	; 0x1
     2a8:	e50b3010 	str	r3, [fp, #-16]
     2ac:	e51b2010 	ldr	r2, [fp, #-16]
     2b0:	e3a03e66 	mov	r3, #1632	; 0x660
     2b4:	e2833005 	add	r3, r3, #5	; 0x5
     2b8:	e1520003 	cmp	r2, r3
     2bc:	9afffff7 	bls	2a0 <delay_ms+0x24>
typedef unsigned int uint_t;

void delay_ms(unsigned int milliseconds){
	volatile unsigned int i;

	while (milliseconds--)
     2c0:	e51b3014 	ldr	r3, [fp, #-20]
     2c4:	e3530000 	cmp	r3, #0	; 0x0
     2c8:	03a03000 	moveq	r3, #0	; 0x0
     2cc:	13a03001 	movne	r3, #1	; 0x1
     2d0:	e20320ff 	and	r2, r3, #255	; 0xff
     2d4:	e51b3014 	ldr	r3, [fp, #-20]
     2d8:	e2433001 	sub	r3, r3, #1	; 0x1
     2dc:	e50b3014 	str	r3, [fp, #-20]
     2e0:	e3520000 	cmp	r2, #0	; 0x0
     2e4:	1affffea 	bne	294 <delay_ms+0x18>
		for (i=0; i<1638; i++);
}
     2e8:	e24bd00c 	sub	sp, fp, #12	; 0xc
     2ec:	e89da800 	ldm	sp, {fp, sp, pc}

000002f0 <enable_led>:

uint_t all_leds[] = {
	LED1, LED2, LED3, LED4, LED5
};

void enable_led(uint_t led) {
     2f0:	e1a0c00d 	mov	ip, sp
     2f4:	e92dd800 	push	{fp, ip, lr, pc}
     2f8:	e24cb004 	sub	fp, ip, #4	; 0x4
     2fc:	e24dd004 	sub	sp, sp, #4	; 0x4
     300:	e50b0010 	str	r0, [fp, #-16]
	AT91C_BASE_PIOA->PIO_OER =  led;							// Ausgang freigeben
     304:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
     308:	e1a039c3 	asr	r3, r3, #19
     30c:	e51b2010 	ldr	r2, [fp, #-16]
     310:	e5832010 	str	r2, [r3, #16]
	AT91C_BASE_PIOA->PIO_OWER = led;	// Freigabe des schreibenden/lesenden Zugriffs
     314:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
     318:	e1a039c3 	asr	r3, r3, #19
     31c:	e51b2010 	ldr	r2, [fp, #-16]
     320:	e58320a0 	str	r2, [r3, #160]
	AT91C_BASE_PIOA->PIO_PPUDR = led;						// Pull-Up ausschalten
     324:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
     328:	e1a039c3 	asr	r3, r3, #19
     32c:	e51b2010 	ldr	r2, [fp, #-16]
     330:	e5832060 	str	r2, [r3, #96]
}
     334:	e89da808 	ldm	sp, {r3, fp, sp, pc}

00000338 <led_on>:

void led_on(uint_t led) {
     338:	e1a0c00d 	mov	ip, sp
     33c:	e92dd800 	push	{fp, ip, lr, pc}
     340:	e24cb004 	sub	fp, ip, #4	; 0x4
     344:	e24dd004 	sub	sp, sp, #4	; 0x4
     348:	e50b0010 	str	r0, [fp, #-16]
	AT91C_BASE_PIOA->PIO_SODR = led;
     34c:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
     350:	e1a039c3 	asr	r3, r3, #19
     354:	e51b2010 	ldr	r2, [fp, #-16]
     358:	e5832030 	str	r2, [r3, #48]
}
     35c:	e89da808 	ldm	sp, {r3, fp, sp, pc}

00000360 <led_off>:

void led_off(uint_t led) {
     360:	e1a0c00d 	mov	ip, sp
     364:	e92dd800 	push	{fp, ip, lr, pc}
     368:	e24cb004 	sub	fp, ip, #4	; 0x4
     36c:	e24dd004 	sub	sp, sp, #4	; 0x4
     370:	e50b0010 	str	r0, [fp, #-16]
	AT91C_BASE_PIOA->PIO_CODR = led;
     374:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
     378:	e1a039c3 	asr	r3, r3, #19
     37c:	e51b2010 	ldr	r2, [fp, #-16]
     380:	e5832034 	str	r2, [r3, #52]
}
     384:	e89da808 	ldm	sp, {r3, fp, sp, pc}

00000388 <invert_pio>:

static void invert_pio (uint_t pio_address) {
     388:	e1a0c00d 	mov	ip, sp
     38c:	e92dd800 	push	{fp, ip, lr, pc}
     390:	e24cb004 	sub	fp, ip, #4	; 0x4
     394:	e24dd008 	sub	sp, sp, #8	; 0x8
     398:	e50b0014 	str	r0, [fp, #-20]
	uint_t current_state_pio = AT91C_BASE_PIOA->PIO_ODSR & pio_address;
     39c:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
     3a0:	e1a039c3 	asr	r3, r3, #19
     3a4:	e5932038 	ldr	r2, [r3, #56]
     3a8:	e51b3014 	ldr	r3, [fp, #-20]
     3ac:	e0023003 	and	r3, r2, r3
     3b0:	e50b3010 	str	r3, [fp, #-16]

	if (current_state_pio) {
     3b4:	e51b3010 	ldr	r3, [fp, #-16]
     3b8:	e3530000 	cmp	r3, #0	; 0x0
     3bc:	0a000009 	beq	3e8 <invert_pio+0x60>
		AT91C_BASE_PIOA->PIO_ODSR =  AT91C_BASE_PIOA->PIO_ODSR & (~pio_address);
     3c0:	e3a0220a 	mov	r2, #-1610612736	; 0xa0000000
     3c4:	e1a029c2 	asr	r2, r2, #19
     3c8:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
     3cc:	e1a039c3 	asr	r3, r3, #19
     3d0:	e5931038 	ldr	r1, [r3, #56]
     3d4:	e51b3014 	ldr	r3, [fp, #-20]
     3d8:	e1e03003 	mvn	r3, r3
     3dc:	e0013003 	and	r3, r1, r3
     3e0:	e5823038 	str	r3, [r2, #56]
     3e4:	ea000007 	b	408 <invert_pio+0x80>
	}
	else {
		AT91C_BASE_PIOA->PIO_ODSR =  AT91C_BASE_PIOA->PIO_ODSR | pio_address;
     3e8:	e3a0220a 	mov	r2, #-1610612736	; 0xa0000000
     3ec:	e1a029c2 	asr	r2, r2, #19
     3f0:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
     3f4:	e1a039c3 	asr	r3, r3, #19
     3f8:	e5931038 	ldr	r1, [r3, #56]
     3fc:	e51b3014 	ldr	r3, [fp, #-20]
     400:	e1813003 	orr	r3, r1, r3
     404:	e5823038 	str	r3, [r2, #56]
	}

}
     408:	e24bd00c 	sub	sp, fp, #12	; 0xc
     40c:	e89da800 	ldm	sp, {fp, sp, pc}

00000410 <get_bitfield_for_leds>:
uint_t get_bitfield_for_leds(uint_t *leds, uint_t num_leds) {
     410:	e1a0c00d 	mov	ip, sp
     414:	e92dd800 	push	{fp, ip, lr, pc}
     418:	e24cb004 	sub	fp, ip, #4	; 0x4
     41c:	e24dd010 	sub	sp, sp, #16	; 0x10
     420:	e50b0018 	str	r0, [fp, #-24]
     424:	e50b101c 	str	r1, [fp, #-28]
	uint_t bitfield = 0;
     428:	e3a03000 	mov	r3, #0	; 0x0
     42c:	e50b3014 	str	r3, [fp, #-20]

	for (uint_t i = 0; i < num_leds; i++) {
     430:	e3a03000 	mov	r3, #0	; 0x0
     434:	e50b3010 	str	r3, [fp, #-16]
     438:	ea00000a 	b	468 <get_bitfield_for_leds+0x58>
		bitfield |= leds[i];
     43c:	e51b3010 	ldr	r3, [fp, #-16]
     440:	e1a02103 	lsl	r2, r3, #2
     444:	e51b3018 	ldr	r3, [fp, #-24]
     448:	e0833002 	add	r3, r3, r2
     44c:	e5932000 	ldr	r2, [r3]
     450:	e51b3014 	ldr	r3, [fp, #-20]
     454:	e1833002 	orr	r3, r3, r2
     458:	e50b3014 	str	r3, [fp, #-20]

}
uint_t get_bitfield_for_leds(uint_t *leds, uint_t num_leds) {
	uint_t bitfield = 0;

	for (uint_t i = 0; i < num_leds; i++) {
     45c:	e51b3010 	ldr	r3, [fp, #-16]
     460:	e2833001 	add	r3, r3, #1	; 0x1
     464:	e50b3010 	str	r3, [fp, #-16]
     468:	e51b2010 	ldr	r2, [fp, #-16]
     46c:	e51b301c 	ldr	r3, [fp, #-28]
     470:	e1520003 	cmp	r2, r3
     474:	3afffff0 	bcc	43c <get_bitfield_for_leds+0x2c>
		bitfield |= leds[i];
	}

	return bitfield;
     478:	e51b3014 	ldr	r3, [fp, #-20]
}
     47c:	e1a00003 	mov	r0, r3
     480:	e24bd00c 	sub	sp, fp, #12	; 0xc
     484:	e89da800 	ldm	sp, {fp, sp, pc}

00000488 <main>:

//**************************************************************
// main()
//**************************************************************
int main(){
     488:	e1a0c00d 	mov	ip, sp
     48c:	e92dd800 	push	{fp, ip, lr, pc}
     490:	e24cb004 	sub	fp, ip, #4	; 0x4
     494:	e24dd008 	sub	sp, sp, #8	; 0x8
	for (uint_t i = 0; i < ARRAY_LENGTH(all_leds); i++) {
     498:	e3a03000 	mov	r3, #0	; 0x0
     49c:	e50b3014 	str	r3, [fp, #-20]
     4a0:	ea00000c 	b	4d8 <main+0x50>
		enable_led(all_leds[i]);
     4a4:	e51b2014 	ldr	r2, [fp, #-20]
     4a8:	e59f309c 	ldr	r3, [pc, #156]	; 54c <main+0xc4>
     4ac:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     4b0:	e1a00003 	mov	r0, r3
     4b4:	ebffff8d 	bl	2f0 <enable_led>
		led_off(all_leds[i]);
     4b8:	e51b2014 	ldr	r2, [fp, #-20]
     4bc:	e59f3088 	ldr	r3, [pc, #136]	; 54c <main+0xc4>
     4c0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     4c4:	e1a00003 	mov	r0, r3
     4c8:	ebffffa4 	bl	360 <led_off>

//**************************************************************
// main()
//**************************************************************
int main(){
	for (uint_t i = 0; i < ARRAY_LENGTH(all_leds); i++) {
     4cc:	e51b3014 	ldr	r3, [fp, #-20]
     4d0:	e2833001 	add	r3, r3, #1	; 0x1
     4d4:	e50b3014 	str	r3, [fp, #-20]
     4d8:	e51b3014 	ldr	r3, [fp, #-20]
     4dc:	e3530004 	cmp	r3, #4	; 0x4
     4e0:	9affffef 	bls	4a4 <main+0x1c>
		enable_led(all_leds[i]);
		led_off(all_leds[i]);
	}

	display_init();
     4e4:	eb00008f 	bl	728 <display_init>

	AT91C_BASE_ADC->ADC_CR = 0x0000000003;
     4e8:	e3a0320b 	mov	r3, #-1342177280	; 0xb0000000
     4ec:	e1a036c3 	asr	r3, r3, #13
     4f0:	e3a02003 	mov	r2, #3	; 0x3
     4f4:	e5832000 	str	r2, [r3]
	AT91C_BASE_ADC->ADC_CHER = 1 << 5;
     4f8:	e3a0320b 	mov	r3, #-1342177280	; 0xb0000000
     4fc:	e1a036c3 	asr	r3, r3, #13
     500:	e3a02020 	mov	r2, #32	; 0x20
     504:	e5832010 	str	r2, [r3, #16]

	while (1) {
		if ((AT91C_BASE_ADC->ADC_SR & (1 << 17))>0) {
     508:	e3a0320b 	mov	r3, #-1342177280	; 0xb0000000
     50c:	e1a036c3 	asr	r3, r3, #13
     510:	e593301c 	ldr	r3, [r3, #28]
     514:	e2033802 	and	r3, r3, #131072	; 0x20000
     518:	e3530000 	cmp	r3, #0	; 0x0
     51c:	0a000006 	beq	53c <main+0xb4>
			// daten ready
			uint_t data = AT91C_BASE_ADC->ADC_CDR4;
     520:	e3a0320b 	mov	r3, #-1342177280	; 0xb0000000
     524:	e1a036c3 	asr	r3, r3, #13
     528:	e5933040 	ldr	r3, [r3, #64]
     52c:	e50b3010 	str	r3, [fp, #-16]
			display_printf("%d", data);
     530:	e59f0018 	ldr	r0, [pc, #24]	; 550 <main+0xc8>
     534:	e51b1010 	ldr	r1, [fp, #-16]
     538:	eb0000f4 	bl	910 <display_printf>
#if 0
		else {
			display_putstr("daten not ready");
		}
#endif
		delay_ms(100);
     53c:	e3a00064 	mov	r0, #100	; 0x64
     540:	ebffff4d 	bl	27c <delay_ms>
		display_clear();
     544:	eb0000dc 	bl	8bc <display_clear>
     548:	eaffffee 	b	508 <main+0x80>
     54c:	00200000 	.word	0x00200000
     550:	0000109c 	.word	0x0000109c

00000554 <delay1us>:
     554:	e58b0000 	str	r0, [fp]
     558:	e1a03100 	lsl	r3, r0, #2

0000055c <Label>:
     55c:	e3530000 	cmp	r3, #0	; 0x0
     560:	0a000001 	beq	56c <Ende>
     564:	e2433001 	sub	r3, r3, #1	; 0x1
     568:	eafffffb 	b	55c <Label>

0000056c <Ende>:
     56c:	e1a0f00e 	mov	pc, lr

00000570 <lcd_write>:
     570:	e1a0c00d 	mov	ip, sp
     574:	e92dd800 	push	{fp, ip, lr, pc}
     578:	e24cb004 	sub	fp, ip, #4	; 0x4
     57c:	e24dd008 	sub	sp, sp, #8	; 0x8
     580:	e1a03000 	mov	r3, r0
     584:	e1a02001 	mov	r2, r1
     588:	e54b3010 	strb	r3, [fp, #-16]
     58c:	e1a03002 	mov	r3, r2
     590:	e54b3014 	strb	r3, [fp, #-20]
     594:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
     598:	e1a039c3 	asr	r3, r3, #19
     59c:	e3a02302 	mov	r2, #134217728	; 0x8000000
     5a0:	e5832034 	str	r2, [r3, #52]
     5a4:	e55b3014 	ldrb	r3, [fp, #-20]
     5a8:	e3530000 	cmp	r3, #0	; 0x0
     5ac:	0a000004 	beq	5c4 <lcd_write+0x54>
     5b0:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
     5b4:	e1a039c3 	asr	r3, r3, #19
     5b8:	e3a02202 	mov	r2, #536870912	; 0x20000000
     5bc:	e5832030 	str	r2, [r3, #48]
     5c0:	ea000003 	b	5d4 <lcd_write+0x64>
     5c4:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
     5c8:	e1a039c3 	asr	r3, r3, #19
     5cc:	e3a02202 	mov	r2, #536870912	; 0x20000000
     5d0:	e5832034 	str	r2, [r3, #52]
     5d4:	e3a0220a 	mov	r2, #-1610612736	; 0xa0000000
     5d8:	e1a029c2 	asr	r2, r2, #19
     5dc:	e3a03407 	mov	r3, #117440512	; 0x7000000
     5e0:	e2833c1f 	add	r3, r3, #7936	; 0x1f00
     5e4:	e5823034 	str	r3, [r2, #52]
     5e8:	e55b3010 	ldrb	r3, [fp, #-16]
     5ec:	e2033001 	and	r3, r3, #1	; 0x1
     5f0:	e20330ff 	and	r3, r3, #255	; 0xff
     5f4:	e3530000 	cmp	r3, #0	; 0x0
     5f8:	0a000003 	beq	60c <lcd_write+0x9c>
     5fc:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
     600:	e1a039c3 	asr	r3, r3, #19
     604:	e3a02c01 	mov	r2, #256	; 0x100
     608:	e5832030 	str	r2, [r3, #48]
     60c:	e55b3010 	ldrb	r3, [fp, #-16]
     610:	e2033002 	and	r3, r3, #2	; 0x2
     614:	e3530000 	cmp	r3, #0	; 0x0
     618:	0a000003 	beq	62c <lcd_write+0xbc>
     61c:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
     620:	e1a039c3 	asr	r3, r3, #19
     624:	e3a02c02 	mov	r2, #512	; 0x200
     628:	e5832030 	str	r2, [r3, #48]
     62c:	e55b3010 	ldrb	r3, [fp, #-16]
     630:	e2033004 	and	r3, r3, #4	; 0x4
     634:	e3530000 	cmp	r3, #0	; 0x0
     638:	0a000003 	beq	64c <lcd_write+0xdc>
     63c:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
     640:	e1a039c3 	asr	r3, r3, #19
     644:	e3a02b01 	mov	r2, #1024	; 0x400
     648:	e5832030 	str	r2, [r3, #48]
     64c:	e55b3010 	ldrb	r3, [fp, #-16]
     650:	e2033008 	and	r3, r3, #8	; 0x8
     654:	e3530000 	cmp	r3, #0	; 0x0
     658:	0a000003 	beq	66c <lcd_write+0xfc>
     65c:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
     660:	e1a039c3 	asr	r3, r3, #19
     664:	e3a02b02 	mov	r2, #2048	; 0x800
     668:	e5832030 	str	r2, [r3, #48]
     66c:	e55b3010 	ldrb	r3, [fp, #-16]
     670:	e2033010 	and	r3, r3, #16	; 0x10
     674:	e3530000 	cmp	r3, #0	; 0x0
     678:	0a000003 	beq	68c <lcd_write+0x11c>
     67c:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
     680:	e1a039c3 	asr	r3, r3, #19
     684:	e3a02a01 	mov	r2, #4096	; 0x1000
     688:	e5832030 	str	r2, [r3, #48]
     68c:	e55b3010 	ldrb	r3, [fp, #-16]
     690:	e2033020 	and	r3, r3, #32	; 0x20
     694:	e3530000 	cmp	r3, #0	; 0x0
     698:	0a000003 	beq	6ac <lcd_write+0x13c>
     69c:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
     6a0:	e1a039c3 	asr	r3, r3, #19
     6a4:	e3a02301 	mov	r2, #67108864	; 0x4000000
     6a8:	e5832030 	str	r2, [r3, #48]
     6ac:	e55b3010 	ldrb	r3, [fp, #-16]
     6b0:	e2033040 	and	r3, r3, #64	; 0x40
     6b4:	e3530000 	cmp	r3, #0	; 0x0
     6b8:	0a000003 	beq	6cc <lcd_write+0x15c>
     6bc:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
     6c0:	e1a039c3 	asr	r3, r3, #19
     6c4:	e3a02402 	mov	r2, #33554432	; 0x2000000
     6c8:	e5832030 	str	r2, [r3, #48]
     6cc:	e55b3010 	ldrb	r3, [fp, #-16]
     6d0:	e1a03c03 	lsl	r3, r3, #24
     6d4:	e1a03c43 	asr	r3, r3, #24
     6d8:	e3530000 	cmp	r3, #0	; 0x0
     6dc:	aa000003 	bge	6f0 <lcd_write+0x180>
     6e0:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
     6e4:	e1a039c3 	asr	r3, r3, #19
     6e8:	e3a02401 	mov	r2, #16777216	; 0x1000000
     6ec:	e5832030 	str	r2, [r3, #48]
     6f0:	e3a00001 	mov	r0, #1	; 0x1
     6f4:	ebffff96 	bl	554 <delay1us>
     6f8:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
     6fc:	e1a039c3 	asr	r3, r3, #19
     700:	e3a02080 	mov	r2, #128	; 0x80
     704:	e5832030 	str	r2, [r3, #48]
     708:	e3a00032 	mov	r0, #50	; 0x32
     70c:	ebffff90 	bl	554 <delay1us>
     710:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
     714:	e1a039c3 	asr	r3, r3, #19
     718:	e3a02080 	mov	r2, #128	; 0x80
     71c:	e5832034 	str	r2, [r3, #52]
     720:	e24bd00c 	sub	sp, fp, #12	; 0xc
     724:	e89da800 	ldm	sp, {fp, sp, pc}

00000728 <display_init>:
     728:	e1a0c00d 	mov	ip, sp
     72c:	e92dd800 	push	{fp, ip, lr, pc}
     730:	e24cb004 	sub	fp, ip, #4	; 0x4
     734:	e3a0220a 	mov	r2, #-1610612736	; 0xa0000000
     738:	e1a029c2 	asr	r2, r2, #19
     73c:	e3a0342f 	mov	r3, #788529152	; 0x2f000000
     740:	e2833d7e 	add	r3, r3, #8064	; 0x1f80
     744:	e5823060 	str	r3, [r2, #96]
     748:	e3a0220a 	mov	r2, #-1610612736	; 0xa0000000
     74c:	e1a029c2 	asr	r2, r2, #19
     750:	e3a0342f 	mov	r3, #788529152	; 0x2f000000
     754:	e2833d7e 	add	r3, r3, #8064	; 0x1f80
     758:	e5823010 	str	r3, [r2, #16]
     75c:	e3a0220a 	mov	r2, #-1610612736	; 0xa0000000
     760:	e1a029c2 	asr	r2, r2, #19
     764:	e3a0342f 	mov	r3, #788529152	; 0x2f000000
     768:	e2833d7e 	add	r3, r3, #8064	; 0x1f80
     76c:	e5823034 	str	r3, [r2, #52]
     770:	e3a00dea 	mov	r0, #14976	; 0x3a80
     774:	e2800018 	add	r0, r0, #24	; 0x18
     778:	ebffff75 	bl	554 <delay1us>
     77c:	e3a00030 	mov	r0, #48	; 0x30
     780:	e3a01000 	mov	r1, #0	; 0x0
     784:	ebffff79 	bl	570 <lcd_write>
     788:	e3a00a01 	mov	r0, #4096	; 0x1000
     78c:	e2800004 	add	r0, r0, #4	; 0x4
     790:	ebffff6f 	bl	554 <delay1us>
     794:	e3a00030 	mov	r0, #48	; 0x30
     798:	e3a01000 	mov	r1, #0	; 0x0
     79c:	ebffff73 	bl	570 <lcd_write>
     7a0:	e3a00064 	mov	r0, #100	; 0x64
     7a4:	ebffff6a 	bl	554 <delay1us>
     7a8:	e3a00030 	mov	r0, #48	; 0x30
     7ac:	e3a01000 	mov	r1, #0	; 0x0
     7b0:	ebffff6e 	bl	570 <lcd_write>
     7b4:	e3a00038 	mov	r0, #56	; 0x38
     7b8:	e3a01000 	mov	r1, #0	; 0x0
     7bc:	ebffff6b 	bl	570 <lcd_write>
     7c0:	e3a0000c 	mov	r0, #12	; 0xc
     7c4:	e3a01000 	mov	r1, #0	; 0x0
     7c8:	ebffff68 	bl	570 <lcd_write>
     7cc:	e3a00006 	mov	r0, #6	; 0x6
     7d0:	e3a01000 	mov	r1, #0	; 0x0
     7d4:	ebffff65 	bl	570 <lcd_write>
     7d8:	e3a00001 	mov	r0, #1	; 0x1
     7dc:	e3a01000 	mov	r1, #0	; 0x0
     7e0:	ebffff62 	bl	570 <lcd_write>
     7e4:	e3a00d4e 	mov	r0, #4992	; 0x1380
     7e8:	e2800008 	add	r0, r0, #8	; 0x8
     7ec:	ebffff58 	bl	554 <delay1us>
     7f0:	e89da800 	ldm	sp, {fp, sp, pc}

000007f4 <display_putchar>:
     7f4:	e1a0c00d 	mov	ip, sp
     7f8:	e92dd800 	push	{fp, ip, lr, pc}
     7fc:	e24cb004 	sub	fp, ip, #4	; 0x4
     800:	e24dd004 	sub	sp, sp, #4	; 0x4
     804:	e1a03000 	mov	r3, r0
     808:	e54b3010 	strb	r3, [fp, #-16]
     80c:	e55b3010 	ldrb	r3, [fp, #-16]
     810:	e1a00003 	mov	r0, r3
     814:	e3a01001 	mov	r1, #1	; 0x1
     818:	ebffff54 	bl	570 <lcd_write>
     81c:	e89da808 	ldm	sp, {r3, fp, sp, pc}

00000820 <display_putstr>:
     820:	e1a0c00d 	mov	ip, sp
     824:	e92dd800 	push	{fp, ip, lr, pc}
     828:	e24cb004 	sub	fp, ip, #4	; 0x4
     82c:	e24dd004 	sub	sp, sp, #4	; 0x4
     830:	e50b0010 	str	r0, [fp, #-16]
     834:	ea000006 	b	854 <display_putstr+0x34>
     838:	e51b3010 	ldr	r3, [fp, #-16]
     83c:	e5d33000 	ldrb	r3, [r3]
     840:	e1a00003 	mov	r0, r3
     844:	ebffffea 	bl	7f4 <display_putchar>
     848:	e51b3010 	ldr	r3, [fp, #-16]
     84c:	e2833001 	add	r3, r3, #1	; 0x1
     850:	e50b3010 	str	r3, [fp, #-16]
     854:	e51b3010 	ldr	r3, [fp, #-16]
     858:	e5d33000 	ldrb	r3, [r3]
     85c:	e3530000 	cmp	r3, #0	; 0x0
     860:	1afffff4 	bne	838 <display_putstr+0x18>
     864:	e89da808 	ldm	sp, {r3, fp, sp, pc}

00000868 <display_set_cursor>:
     868:	e1a0c00d 	mov	ip, sp
     86c:	e92dd800 	push	{fp, ip, lr, pc}
     870:	e24cb004 	sub	fp, ip, #4	; 0x4
     874:	e24dd008 	sub	sp, sp, #8	; 0x8
     878:	e1a03000 	mov	r3, r0
     87c:	e1a02001 	mov	r2, r1
     880:	e54b3010 	strb	r3, [fp, #-16]
     884:	e1a03002 	mov	r3, r2
     888:	e54b3014 	strb	r3, [fp, #-20]
     88c:	e55b3014 	ldrb	r3, [fp, #-20]
     890:	e2833002 	add	r3, r3, #2	; 0x2
     894:	e1a03303 	lsl	r3, r3, #6
     898:	e20320ff 	and	r2, r3, #255	; 0xff
     89c:	e55b3010 	ldrb	r3, [fp, #-16]
     8a0:	e0823003 	add	r3, r2, r3
     8a4:	e20330ff 	and	r3, r3, #255	; 0xff
     8a8:	e1a00003 	mov	r0, r3
     8ac:	e3a01000 	mov	r1, #0	; 0x0
     8b0:	ebffff2e 	bl	570 <lcd_write>
     8b4:	e24bd00c 	sub	sp, fp, #12	; 0xc
     8b8:	e89da800 	ldm	sp, {fp, sp, pc}

000008bc <display_clear>:
     8bc:	e1a0c00d 	mov	ip, sp
     8c0:	e92dd800 	push	{fp, ip, lr, pc}
     8c4:	e24cb004 	sub	fp, ip, #4	; 0x4
     8c8:	e24dd004 	sub	sp, sp, #4	; 0x4
     8cc:	e59f3038 	ldr	r3, [pc, #56]	; 90c <display_clear+0x50>
     8d0:	e50b3010 	str	r3, [fp, #-16]
     8d4:	e3a00000 	mov	r0, #0	; 0x0
     8d8:	e3a01000 	mov	r1, #0	; 0x0
     8dc:	ebffffe1 	bl	868 <display_set_cursor>
     8e0:	e51b0010 	ldr	r0, [fp, #-16]
     8e4:	ebffffcd 	bl	820 <display_putstr>
     8e8:	e3a00000 	mov	r0, #0	; 0x0
     8ec:	e3a01001 	mov	r1, #1	; 0x1
     8f0:	ebffffdc 	bl	868 <display_set_cursor>
     8f4:	e51b0010 	ldr	r0, [fp, #-16]
     8f8:	ebffffc8 	bl	820 <display_putstr>
     8fc:	e3a00000 	mov	r0, #0	; 0x0
     900:	e3a01000 	mov	r1, #0	; 0x0
     904:	ebffffd7 	bl	868 <display_set_cursor>
     908:	e89da808 	ldm	sp, {r3, fp, sp, pc}
     90c:	000010a0 	.word	0x000010a0

00000910 <display_printf>:
     910:	e1a0c00d 	mov	ip, sp
     914:	e92d000f 	push	{r0, r1, r2, r3}
     918:	e92dd810 	push	{r4, fp, ip, lr, pc}
     91c:	e24cb014 	sub	fp, ip, #20	; 0x14
     920:	e24dd044 	sub	sp, sp, #68	; 0x44
     924:	e59f366c 	ldr	r3, [pc, #1644]	; f98 <display_printf+0x688>
     928:	e24b204a 	sub	r2, fp, #74	; 0x4a
     92c:	e3a0c011 	mov	ip, #17	; 0x11
     930:	e1a00002 	mov	r0, r2
     934:	e1a01003 	mov	r1, r3
     938:	e1a0200c 	mov	r2, ip
     93c:	eb000197 	bl	fa0 <memcpy>
     940:	e28b3008 	add	r3, fp, #8	; 0x8
     944:	e50b3050 	str	r3, [fp, #-80]
     948:	e59b3004 	ldr	r3, [fp, #4]
     94c:	e50b3014 	str	r3, [fp, #-20]
     950:	ea00018a 	b	f80 <display_printf+0x670>
     954:	e51b3014 	ldr	r3, [fp, #-20]
     958:	e5d33000 	ldrb	r3, [r3]
     95c:	e3530025 	cmp	r3, #37	; 0x25
     960:	1a00017f 	bne	f64 <display_printf+0x654>
     964:	e3a03000 	mov	r3, #0	; 0x0
     968:	e54b3025 	strb	r3, [fp, #-37]
     96c:	e55b1025 	ldrb	r1, [fp, #-37]
     970:	e51b3014 	ldr	r3, [fp, #-20]
     974:	e5d30000 	ldrb	r0, [r3]
     978:	e3e02028 	mvn	r2, #40	; 0x28
     97c:	e24bc010 	sub	ip, fp, #16	; 0x10
     980:	e08c3001 	add	r3, ip, r1
     984:	e0832002 	add	r2, r3, r2
     988:	e1a03000 	mov	r3, r0
     98c:	e5c23000 	strb	r3, [r2]
     990:	e55b3025 	ldrb	r3, [fp, #-37]
     994:	e2833001 	add	r3, r3, #1	; 0x1
     998:	e54b3025 	strb	r3, [fp, #-37]
     99c:	e51b3014 	ldr	r3, [fp, #-20]
     9a0:	e2833001 	add	r3, r3, #1	; 0x1
     9a4:	e50b3014 	str	r3, [fp, #-20]
     9a8:	e55b3025 	ldrb	r3, [fp, #-37]
     9ac:	e3530012 	cmp	r3, #18	; 0x12
     9b0:	9a000001 	bls	9bc <display_printf+0xac>
     9b4:	e3a03012 	mov	r3, #18	; 0x12
     9b8:	e54b3025 	strb	r3, [fp, #-37]
     9bc:	e51b3014 	ldr	r3, [fp, #-20]
     9c0:	e5d33000 	ldrb	r3, [r3]
     9c4:	e3530064 	cmp	r3, #100	; 0x64
     9c8:	13a03000 	movne	r3, #0	; 0x0
     9cc:	03a03001 	moveq	r3, #1	; 0x1
     9d0:	e20320ff 	and	r2, r3, #255	; 0xff
     9d4:	e51b3014 	ldr	r3, [fp, #-20]
     9d8:	e5d33000 	ldrb	r3, [r3]
     9dc:	e3530069 	cmp	r3, #105	; 0x69
     9e0:	13a03000 	movne	r3, #0	; 0x0
     9e4:	03a03001 	moveq	r3, #1	; 0x1
     9e8:	e20330ff 	and	r3, r3, #255	; 0xff
     9ec:	e1823003 	orr	r3, r2, r3
     9f0:	e20330ff 	and	r3, r3, #255	; 0xff
     9f4:	e1a02003 	mov	r2, r3
     9f8:	e51b3014 	ldr	r3, [fp, #-20]
     9fc:	e5d33000 	ldrb	r3, [r3]
     a00:	e353006f 	cmp	r3, #111	; 0x6f
     a04:	13a03000 	movne	r3, #0	; 0x0
     a08:	03a03001 	moveq	r3, #1	; 0x1
     a0c:	e1822003 	orr	r2, r2, r3
     a10:	e51b3014 	ldr	r3, [fp, #-20]
     a14:	e5d33000 	ldrb	r3, [r3]
     a18:	e3530078 	cmp	r3, #120	; 0x78
     a1c:	13a03000 	movne	r3, #0	; 0x0
     a20:	03a03001 	moveq	r3, #1	; 0x1
     a24:	e1822003 	orr	r2, r2, r3
     a28:	e51b3014 	ldr	r3, [fp, #-20]
     a2c:	e5d33000 	ldrb	r3, [r3]
     a30:	e3530058 	cmp	r3, #88	; 0x58
     a34:	13a03000 	movne	r3, #0	; 0x0
     a38:	03a03001 	moveq	r3, #1	; 0x1
     a3c:	e1822003 	orr	r2, r2, r3
     a40:	e51b3014 	ldr	r3, [fp, #-20]
     a44:	e5d33000 	ldrb	r3, [r3]
     a48:	e3530075 	cmp	r3, #117	; 0x75
     a4c:	13a03000 	movne	r3, #0	; 0x0
     a50:	03a03001 	moveq	r3, #1	; 0x1
     a54:	e1822003 	orr	r2, r2, r3
     a58:	e51b3014 	ldr	r3, [fp, #-20]
     a5c:	e5d33000 	ldrb	r3, [r3]
     a60:	e3530063 	cmp	r3, #99	; 0x63
     a64:	13a03000 	movne	r3, #0	; 0x0
     a68:	03a03001 	moveq	r3, #1	; 0x1
     a6c:	e1822003 	orr	r2, r2, r3
     a70:	e51b3014 	ldr	r3, [fp, #-20]
     a74:	e5d33000 	ldrb	r3, [r3]
     a78:	e3530073 	cmp	r3, #115	; 0x73
     a7c:	13a03000 	movne	r3, #0	; 0x0
     a80:	03a03001 	moveq	r3, #1	; 0x1
     a84:	e1822003 	orr	r2, r2, r3
     a88:	e51b3014 	ldr	r3, [fp, #-20]
     a8c:	e5d33000 	ldrb	r3, [r3]
     a90:	e3530066 	cmp	r3, #102	; 0x66
     a94:	13a03000 	movne	r3, #0	; 0x0
     a98:	03a03001 	moveq	r3, #1	; 0x1
     a9c:	e1822003 	orr	r2, r2, r3
     aa0:	e51b3014 	ldr	r3, [fp, #-20]
     aa4:	e5d33000 	ldrb	r3, [r3]
     aa8:	e3530065 	cmp	r3, #101	; 0x65
     aac:	13a03000 	movne	r3, #0	; 0x0
     ab0:	03a03001 	moveq	r3, #1	; 0x1
     ab4:	e1822003 	orr	r2, r2, r3
     ab8:	e51b3014 	ldr	r3, [fp, #-20]
     abc:	e5d33000 	ldrb	r3, [r3]
     ac0:	e3530045 	cmp	r3, #69	; 0x45
     ac4:	13a03000 	movne	r3, #0	; 0x0
     ac8:	03a03001 	moveq	r3, #1	; 0x1
     acc:	e1822003 	orr	r2, r2, r3
     ad0:	e51b3014 	ldr	r3, [fp, #-20]
     ad4:	e5d33000 	ldrb	r3, [r3]
     ad8:	e3530067 	cmp	r3, #103	; 0x67
     adc:	13a03000 	movne	r3, #0	; 0x0
     ae0:	03a03001 	moveq	r3, #1	; 0x1
     ae4:	e1822003 	orr	r2, r2, r3
     ae8:	e51b3014 	ldr	r3, [fp, #-20]
     aec:	e5d33000 	ldrb	r3, [r3]
     af0:	e3530047 	cmp	r3, #71	; 0x47
     af4:	13a03000 	movne	r3, #0	; 0x0
     af8:	03a03001 	moveq	r3, #1	; 0x1
     afc:	e1822003 	orr	r2, r2, r3
     b00:	e51b3014 	ldr	r3, [fp, #-20]
     b04:	e5d33000 	ldrb	r3, [r3]
     b08:	e3530025 	cmp	r3, #37	; 0x25
     b0c:	13a03000 	movne	r3, #0	; 0x0
     b10:	03a03001 	moveq	r3, #1	; 0x1
     b14:	e1823003 	orr	r3, r2, r3
     b18:	e3530000 	cmp	r3, #0	; 0x0
     b1c:	0affff92 	beq	96c <display_printf+0x5c>
     b20:	e55b1025 	ldrb	r1, [fp, #-37]
     b24:	e51b3014 	ldr	r3, [fp, #-20]
     b28:	e5d30000 	ldrb	r0, [r3]
     b2c:	e3e02028 	mvn	r2, #40	; 0x28
     b30:	e24bc010 	sub	ip, fp, #16	; 0x10
     b34:	e08c3001 	add	r3, ip, r1
     b38:	e0832002 	add	r2, r3, r2
     b3c:	e1a03000 	mov	r3, r0
     b40:	e5c23000 	strb	r3, [r2]
     b44:	e55b3025 	ldrb	r3, [fp, #-37]
     b48:	e2833001 	add	r3, r3, #1	; 0x1
     b4c:	e54b3025 	strb	r3, [fp, #-37]
     b50:	e55b3025 	ldrb	r3, [fp, #-37]
     b54:	e3e02028 	mvn	r2, #40	; 0x28
     b58:	e24b1010 	sub	r1, fp, #16	; 0x10
     b5c:	e0813003 	add	r3, r1, r3
     b60:	e0832002 	add	r2, r3, r2
     b64:	e3a03000 	mov	r3, #0	; 0x0
     b68:	e5c23000 	strb	r3, [r2]
     b6c:	e51b3014 	ldr	r3, [fp, #-20]
     b70:	e5d33000 	ldrb	r3, [r3]
     b74:	e3530064 	cmp	r3, #100	; 0x64
     b78:	13a03000 	movne	r3, #0	; 0x0
     b7c:	03a03001 	moveq	r3, #1	; 0x1
     b80:	e20320ff 	and	r2, r3, #255	; 0xff
     b84:	e51b3014 	ldr	r3, [fp, #-20]
     b88:	e5d33000 	ldrb	r3, [r3]
     b8c:	e3530069 	cmp	r3, #105	; 0x69
     b90:	13a03000 	movne	r3, #0	; 0x0
     b94:	03a03001 	moveq	r3, #1	; 0x1
     b98:	e20330ff 	and	r3, r3, #255	; 0xff
     b9c:	e1823003 	orr	r3, r2, r3
     ba0:	e20330ff 	and	r3, r3, #255	; 0xff
     ba4:	e3530000 	cmp	r3, #0	; 0x0
     ba8:	0a00004f 	beq	cec <display_printf+0x3dc>
     bac:	e51b2050 	ldr	r2, [fp, #-80]
     bb0:	e2823004 	add	r3, r2, #4	; 0x4
     bb4:	e50b3050 	str	r3, [fp, #-80]
     bb8:	e1a03002 	mov	r3, r2
     bbc:	e5933000 	ldr	r3, [r3]
     bc0:	e50b3020 	str	r3, [fp, #-32]
     bc4:	e51b3020 	ldr	r3, [fp, #-32]
     bc8:	e3530000 	cmp	r3, #0	; 0x0
     bcc:	aa000004 	bge	be4 <display_printf+0x2d4>
     bd0:	e3a0002d 	mov	r0, #45	; 0x2d
     bd4:	ebffff06 	bl	7f4 <display_putchar>
     bd8:	e51b3020 	ldr	r3, [fp, #-32]
     bdc:	e2633000 	rsb	r3, r3, #0	; 0x0
     be0:	e50b3020 	str	r3, [fp, #-32]
     be4:	e51b3020 	ldr	r3, [fp, #-32]
     be8:	e3530000 	cmp	r3, #0	; 0x0
     bec:	1a000002 	bne	bfc <display_printf+0x2ec>
     bf0:	e3a00030 	mov	r0, #48	; 0x30
     bf4:	ebfffefe 	bl	7f4 <display_putchar>
     bf8:	ea00003b 	b	cec <display_printf+0x3dc>
     bfc:	e3a0300f 	mov	r3, #15	; 0xf
     c00:	e54b3025 	strb	r3, [fp, #-37]
     c04:	ea000023 	b	c98 <display_printf+0x388>
     c08:	e55b0025 	ldrb	r0, [fp, #-37]
     c0c:	e51b1020 	ldr	r1, [fp, #-32]
     c10:	e59f3384 	ldr	r3, [pc, #900]	; f9c <display_printf+0x68c>
     c14:	e0c32391 	smull	r2, r3, r1, r3
     c18:	e1a02143 	asr	r2, r3, #2
     c1c:	e1a03fc1 	asr	r3, r1, #31
     c20:	e0633002 	rsb	r3, r3, r2
     c24:	e50b3054 	str	r3, [fp, #-84]
     c28:	e51b3054 	ldr	r3, [fp, #-84]
     c2c:	e1a03083 	lsl	r3, r3, #1
     c30:	e1a02103 	lsl	r2, r3, #2
     c34:	e0833002 	add	r3, r3, r2
     c38:	e0633001 	rsb	r3, r3, r1
     c3c:	e50b3054 	str	r3, [fp, #-84]
     c40:	e3e02039 	mvn	r2, #57	; 0x39
     c44:	e24bc010 	sub	ip, fp, #16	; 0x10
     c48:	e51b1054 	ldr	r1, [fp, #-84]
     c4c:	e08c3001 	add	r3, ip, r1
     c50:	e0833002 	add	r3, r3, r2
     c54:	e5d31000 	ldrb	r1, [r3]
     c58:	e3e02028 	mvn	r2, #40	; 0x28
     c5c:	e24bc010 	sub	ip, fp, #16	; 0x10
     c60:	e08c3000 	add	r3, ip, r0
     c64:	e0832002 	add	r2, r3, r2
     c68:	e1a03001 	mov	r3, r1
     c6c:	e5c23000 	strb	r3, [r2]
     c70:	e51b1020 	ldr	r1, [fp, #-32]
     c74:	e59f3320 	ldr	r3, [pc, #800]	; f9c <display_printf+0x68c>
     c78:	e0c32391 	smull	r2, r3, r1, r3
     c7c:	e1a02143 	asr	r2, r3, #2
     c80:	e1a03fc1 	asr	r3, r1, #31
     c84:	e0633002 	rsb	r3, r3, r2
     c88:	e50b3020 	str	r3, [fp, #-32]
     c8c:	e55b3025 	ldrb	r3, [fp, #-37]
     c90:	e2433001 	sub	r3, r3, #1	; 0x1
     c94:	e54b3025 	strb	r3, [fp, #-37]
     c98:	e55b3025 	ldrb	r3, [fp, #-37]
     c9c:	e3530000 	cmp	r3, #0	; 0x0
     ca0:	0a00000e 	beq	ce0 <display_printf+0x3d0>
     ca4:	e51b3020 	ldr	r3, [fp, #-32]
     ca8:	e3530000 	cmp	r3, #0	; 0x0
     cac:	1affffd5 	bne	c08 <display_printf+0x2f8>
     cb0:	ea00000a 	b	ce0 <display_printf+0x3d0>
     cb4:	e55b3025 	ldrb	r3, [fp, #-37]
     cb8:	e2833001 	add	r3, r3, #1	; 0x1
     cbc:	e54b3025 	strb	r3, [fp, #-37]
     cc0:	e55b3025 	ldrb	r3, [fp, #-37]
     cc4:	e3e02028 	mvn	r2, #40	; 0x28
     cc8:	e24bc010 	sub	ip, fp, #16	; 0x10
     ccc:	e08c3003 	add	r3, ip, r3
     cd0:	e0833002 	add	r3, r3, r2
     cd4:	e5d33000 	ldrb	r3, [r3]
     cd8:	e1a00003 	mov	r0, r3
     cdc:	ebfffec4 	bl	7f4 <display_putchar>
     ce0:	e55b3025 	ldrb	r3, [fp, #-37]
     ce4:	e353000e 	cmp	r3, #14	; 0xe
     ce8:	9afffff1 	bls	cb4 <display_printf+0x3a4>
     cec:	e51b3014 	ldr	r3, [fp, #-20]
     cf0:	e5d33000 	ldrb	r3, [r3]
     cf4:	e3530078 	cmp	r3, #120	; 0x78
     cf8:	13a03000 	movne	r3, #0	; 0x0
     cfc:	03a03001 	moveq	r3, #1	; 0x1
     d00:	e20320ff 	and	r2, r3, #255	; 0xff
     d04:	e51b3014 	ldr	r3, [fp, #-20]
     d08:	e5d33000 	ldrb	r3, [r3]
     d0c:	e3530058 	cmp	r3, #88	; 0x58
     d10:	13a03000 	movne	r3, #0	; 0x0
     d14:	03a03001 	moveq	r3, #1	; 0x1
     d18:	e20330ff 	and	r3, r3, #255	; 0xff
     d1c:	e1823003 	orr	r3, r2, r3
     d20:	e20330ff 	and	r3, r3, #255	; 0xff
     d24:	e3530000 	cmp	r3, #0	; 0x0
     d28:	0a000037 	beq	e0c <display_printf+0x4fc>
     d2c:	e51b2050 	ldr	r2, [fp, #-80]
     d30:	e2823004 	add	r3, r2, #4	; 0x4
     d34:	e50b3050 	str	r3, [fp, #-80]
     d38:	e1a03002 	mov	r3, r2
     d3c:	e5933000 	ldr	r3, [r3]
     d40:	e50b3024 	str	r3, [fp, #-36]
     d44:	e51b3024 	ldr	r3, [fp, #-36]
     d48:	e3530000 	cmp	r3, #0	; 0x0
     d4c:	1a000002 	bne	d5c <display_printf+0x44c>
     d50:	e3a00030 	mov	r0, #48	; 0x30
     d54:	ebfffea6 	bl	7f4 <display_putchar>
     d58:	ea00002b 	b	e0c <display_printf+0x4fc>
     d5c:	e3a0300f 	mov	r3, #15	; 0xf
     d60:	e54b3025 	strb	r3, [fp, #-37]
     d64:	ea000013 	b	db8 <display_printf+0x4a8>
     d68:	e55b0025 	ldrb	r0, [fp, #-37]
     d6c:	e51b3024 	ldr	r3, [fp, #-36]
     d70:	e203300f 	and	r3, r3, #15	; 0xf
     d74:	e3e02039 	mvn	r2, #57	; 0x39
     d78:	e24b1010 	sub	r1, fp, #16	; 0x10
     d7c:	e0813003 	add	r3, r1, r3
     d80:	e0833002 	add	r3, r3, r2
     d84:	e5d31000 	ldrb	r1, [r3]
     d88:	e3e02028 	mvn	r2, #40	; 0x28
     d8c:	e24bc010 	sub	ip, fp, #16	; 0x10
     d90:	e08c3000 	add	r3, ip, r0
     d94:	e0832002 	add	r2, r3, r2
     d98:	e1a03001 	mov	r3, r1
     d9c:	e5c23000 	strb	r3, [r2]
     da0:	e51b3024 	ldr	r3, [fp, #-36]
     da4:	e1a03223 	lsr	r3, r3, #4
     da8:	e50b3024 	str	r3, [fp, #-36]
     dac:	e55b3025 	ldrb	r3, [fp, #-37]
     db0:	e2433001 	sub	r3, r3, #1	; 0x1
     db4:	e54b3025 	strb	r3, [fp, #-37]
     db8:	e55b3025 	ldrb	r3, [fp, #-37]
     dbc:	e3530000 	cmp	r3, #0	; 0x0
     dc0:	0a00000e 	beq	e00 <display_printf+0x4f0>
     dc4:	e51b3024 	ldr	r3, [fp, #-36]
     dc8:	e3530000 	cmp	r3, #0	; 0x0
     dcc:	1affffe5 	bne	d68 <display_printf+0x458>
     dd0:	ea00000a 	b	e00 <display_printf+0x4f0>
     dd4:	e55b3025 	ldrb	r3, [fp, #-37]
     dd8:	e2833001 	add	r3, r3, #1	; 0x1
     ddc:	e54b3025 	strb	r3, [fp, #-37]
     de0:	e55b3025 	ldrb	r3, [fp, #-37]
     de4:	e3e02028 	mvn	r2, #40	; 0x28
     de8:	e24b1010 	sub	r1, fp, #16	; 0x10
     dec:	e0813003 	add	r3, r1, r3
     df0:	e0833002 	add	r3, r3, r2
     df4:	e5d33000 	ldrb	r3, [r3]
     df8:	e1a00003 	mov	r0, r3
     dfc:	ebfffe7c 	bl	7f4 <display_putchar>
     e00:	e55b3025 	ldrb	r3, [fp, #-37]
     e04:	e353000e 	cmp	r3, #14	; 0xe
     e08:	9afffff1 	bls	dd4 <display_printf+0x4c4>
     e0c:	e51b3014 	ldr	r3, [fp, #-20]
     e10:	e5d33000 	ldrb	r3, [r3]
     e14:	e353006f 	cmp	r3, #111	; 0x6f
     e18:	13a03000 	movne	r3, #0	; 0x0
     e1c:	03a03001 	moveq	r3, #1	; 0x1
     e20:	e20320ff 	and	r2, r3, #255	; 0xff
     e24:	e51b3014 	ldr	r3, [fp, #-20]
     e28:	e5d33000 	ldrb	r3, [r3]
     e2c:	e3530075 	cmp	r3, #117	; 0x75
     e30:	13a03000 	movne	r3, #0	; 0x0
     e34:	03a03001 	moveq	r3, #1	; 0x1
     e38:	e20330ff 	and	r3, r3, #255	; 0xff
     e3c:	e1823003 	orr	r3, r2, r3
     e40:	e20330ff 	and	r3, r3, #255	; 0xff
     e44:	e1a02003 	mov	r2, r3
     e48:	e51b3014 	ldr	r3, [fp, #-20]
     e4c:	e5d33000 	ldrb	r3, [r3]
     e50:	e3530063 	cmp	r3, #99	; 0x63
     e54:	13a03000 	movne	r3, #0	; 0x0
     e58:	03a03001 	moveq	r3, #1	; 0x1
     e5c:	e1822003 	orr	r2, r2, r3
     e60:	e51b3014 	ldr	r3, [fp, #-20]
     e64:	e5d33000 	ldrb	r3, [r3]
     e68:	e3530073 	cmp	r3, #115	; 0x73
     e6c:	13a03000 	movne	r3, #0	; 0x0
     e70:	03a03001 	moveq	r3, #1	; 0x1
     e74:	e1823003 	orr	r3, r2, r3
     e78:	e3530000 	cmp	r3, #0	; 0x0
     e7c:	0a000005 	beq	e98 <display_printf+0x588>
     e80:	e51b2050 	ldr	r2, [fp, #-80]
     e84:	e2823004 	add	r3, r2, #4	; 0x4
     e88:	e50b3050 	str	r3, [fp, #-80]
     e8c:	e1a03002 	mov	r3, r2
     e90:	e5933000 	ldr	r3, [r3]
     e94:	e50b3024 	str	r3, [fp, #-36]
     e98:	e51b3014 	ldr	r3, [fp, #-20]
     e9c:	e5d33000 	ldrb	r3, [r3]
     ea0:	e3530066 	cmp	r3, #102	; 0x66
     ea4:	13a03000 	movne	r3, #0	; 0x0
     ea8:	03a03001 	moveq	r3, #1	; 0x1
     eac:	e20320ff 	and	r2, r3, #255	; 0xff
     eb0:	e51b3014 	ldr	r3, [fp, #-20]
     eb4:	e5d33000 	ldrb	r3, [r3]
     eb8:	e3530065 	cmp	r3, #101	; 0x65
     ebc:	13a03000 	movne	r3, #0	; 0x0
     ec0:	03a03001 	moveq	r3, #1	; 0x1
     ec4:	e20330ff 	and	r3, r3, #255	; 0xff
     ec8:	e1823003 	orr	r3, r2, r3
     ecc:	e20330ff 	and	r3, r3, #255	; 0xff
     ed0:	e1a02003 	mov	r2, r3
     ed4:	e51b3014 	ldr	r3, [fp, #-20]
     ed8:	e5d33000 	ldrb	r3, [r3]
     edc:	e3530045 	cmp	r3, #69	; 0x45
     ee0:	13a03000 	movne	r3, #0	; 0x0
     ee4:	03a03001 	moveq	r3, #1	; 0x1
     ee8:	e1822003 	orr	r2, r2, r3
     eec:	e51b3014 	ldr	r3, [fp, #-20]
     ef0:	e5d33000 	ldrb	r3, [r3]
     ef4:	e3530067 	cmp	r3, #103	; 0x67
     ef8:	13a03000 	movne	r3, #0	; 0x0
     efc:	03a03001 	moveq	r3, #1	; 0x1
     f00:	e1822003 	orr	r2, r2, r3
     f04:	e51b3014 	ldr	r3, [fp, #-20]
     f08:	e5d33000 	ldrb	r3, [r3]
     f0c:	e3530047 	cmp	r3, #71	; 0x47
     f10:	13a03000 	movne	r3, #0	; 0x0
     f14:	03a03001 	moveq	r3, #1	; 0x1
     f18:	e1823003 	orr	r3, r2, r3
     f1c:	e3530000 	cmp	r3, #0	; 0x0
     f20:	0a000006 	beq	f40 <display_printf+0x630>
     f24:	e51b2050 	ldr	r2, [fp, #-80]
     f28:	e2823008 	add	r3, r2, #8	; 0x8
     f2c:	e50b3050 	str	r3, [fp, #-80]
     f30:	e1a03002 	mov	r3, r2
     f34:	e8930018 	ldm	r3, {r3, r4}
     f38:	e50b301c 	str	r3, [fp, #-28]
     f3c:	e50b4018 	str	r4, [fp, #-24]
     f40:	e51b3014 	ldr	r3, [fp, #-20]
     f44:	e5d33000 	ldrb	r3, [r3]
     f48:	e3530025 	cmp	r3, #37	; 0x25
     f4c:	1a000008 	bne	f74 <display_printf+0x664>
     f50:	e51b3014 	ldr	r3, [fp, #-20]
     f54:	e5d33000 	ldrb	r3, [r3]
     f58:	e1a00003 	mov	r0, r3
     f5c:	ebfffe24 	bl	7f4 <display_putchar>
     f60:	ea000003 	b	f74 <display_printf+0x664>
     f64:	e51b3014 	ldr	r3, [fp, #-20]
     f68:	e5d33000 	ldrb	r3, [r3]
     f6c:	e1a00003 	mov	r0, r3
     f70:	ebfffe1f 	bl	7f4 <display_putchar>
     f74:	e51b3014 	ldr	r3, [fp, #-20]
     f78:	e2833001 	add	r3, r3, #1	; 0x1
     f7c:	e50b3014 	str	r3, [fp, #-20]
     f80:	e51b3014 	ldr	r3, [fp, #-20]
     f84:	e5d33000 	ldrb	r3, [r3]
     f88:	e3530000 	cmp	r3, #0	; 0x0
     f8c:	1afffe70 	bne	954 <display_printf+0x44>
     f90:	e24bd010 	sub	sp, fp, #16	; 0x10
     f94:	e89da810 	ldm	sp, {r4, fp, sp, pc}
     f98:	000010b4 	.word	0x000010b4
     f9c:	66666667 	.word	0x66666667

00000fa0 <memcpy>:
     fa0:	e92d0070 	push	{r4, r5, r6}
     fa4:	e352000f 	cmp	r2, #15	; 0xf
     fa8:	e1a04002 	mov	r4, r2
     fac:	e1a05001 	mov	r5, r1
     fb0:	e1a02001 	mov	r2, r1
     fb4:	e1a06000 	mov	r6, r0
     fb8:	e1a01004 	mov	r1, r4
     fbc:	9a000002 	bls	fcc <memcpy+0x2c>
     fc0:	e1853006 	orr	r3, r5, r6
     fc4:	e3130003 	tst	r3, #3	; 0x3
     fc8:	0a00000a 	beq	ff8 <memcpy+0x58>
     fcc:	e3510000 	cmp	r1, #0	; 0x0
     fd0:	0a000005 	beq	fec <memcpy+0x4c>
     fd4:	e3a0c000 	mov	ip, #0	; 0x0
     fd8:	e7d2300c 	ldrb	r3, [r2, ip]
     fdc:	e7c0300c 	strb	r3, [r0, ip]
     fe0:	e28cc001 	add	ip, ip, #1	; 0x1
     fe4:	e15c0001 	cmp	ip, r1
     fe8:	1afffffa 	bne	fd8 <memcpy+0x38>
     fec:	e1a00006 	mov	r0, r6
     ff0:	e8bd0070 	pop	{r4, r5, r6}
     ff4:	e12fff1e 	bx	lr
     ff8:	e1a01006 	mov	r1, r6
     ffc:	e1a0c005 	mov	ip, r5
    1000:	e1a00004 	mov	r0, r4
    1004:	e59c3000 	ldr	r3, [ip]
    1008:	e5813000 	str	r3, [r1]
    100c:	e59c2004 	ldr	r2, [ip, #4]
    1010:	e5812004 	str	r2, [r1, #4]
    1014:	e59c3008 	ldr	r3, [ip, #8]
    1018:	e5813008 	str	r3, [r1, #8]
    101c:	e2400010 	sub	r0, r0, #16	; 0x10
    1020:	e59c300c 	ldr	r3, [ip, #12]
    1024:	e350000f 	cmp	r0, #15	; 0xf
    1028:	e581300c 	str	r3, [r1, #12]
    102c:	e28cc010 	add	ip, ip, #16	; 0x10
    1030:	e2811010 	add	r1, r1, #16	; 0x10
    1034:	8afffff2 	bhi	1004 <memcpy+0x64>
    1038:	e2442010 	sub	r2, r4, #16	; 0x10
    103c:	e1a03222 	lsr	r3, r2, #4
    1040:	e0421203 	sub	r1, r2, r3, lsl #4
    1044:	e2833001 	add	r3, r3, #1	; 0x1
    1048:	e1a03203 	lsl	r3, r3, #4
    104c:	e3510003 	cmp	r1, #3	; 0x3
    1050:	e0854003 	add	r4, r5, r3
    1054:	e0860003 	add	r0, r6, r3
    1058:	9a00000d 	bls	1094 <memcpy+0xf4>
    105c:	e3a0c000 	mov	ip, #0	; 0x0
    1060:	e794300c 	ldr	r3, [r4, ip]
    1064:	e780300c 	str	r3, [r0, ip]
    1068:	e28cc004 	add	ip, ip, #4	; 0x4
    106c:	e06c3001 	rsb	r3, ip, r1
    1070:	e3530003 	cmp	r3, #3	; 0x3
    1074:	8afffff9 	bhi	1060 <memcpy+0xc0>
    1078:	e2411004 	sub	r1, r1, #4	; 0x4
    107c:	e1a02121 	lsr	r2, r1, #2
    1080:	e2823001 	add	r3, r2, #1	; 0x1
    1084:	e1a03103 	lsl	r3, r3, #2
    1088:	e0800003 	add	r0, r0, r3
    108c:	e0411102 	sub	r1, r1, r2, lsl #2
    1090:	e0844003 	add	r4, r4, r3
    1094:	e1a02004 	mov	r2, r4
    1098:	eaffffcb 	b	fcc <memcpy+0x2c>
